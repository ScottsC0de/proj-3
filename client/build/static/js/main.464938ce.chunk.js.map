{"version":3,"sources":["utils/mutations.js","utils/auth.js","components/SignupForm.js","components/LoginForm.js","utils/queries.js","components/navbar.js","utils/localStorage.js","pages/SavedImages.js","pages/SearchedImages.js","components/ImageList.js","pages/LikePhoto.js","pages/LikeButton.js","pages/AllSavedImages.js","pages/UserList.js","components/CommentList.js","components/CommentForm.js","pages/SingleUser.js","App.js","reportWebVitals.js","index.js"],"names":["LOGIN_USER","gql","_templateObject","_taggedTemplateLiteral","ADD_USER","_templateObject2","SAVE_IMAGE","_templateObject3","REMOVE_IMAGE","_templateObject4","ADD_COMMENT","_templateObject5","LIKE_IMAGE","_templateObject6","AuthService","_classCallCheck","_createClass","key","value","decode","this","getToken","token","isTokenExpired","exp","Date","now","localStorage","removeItem","getItem","idToken","setItem","window","location","assign","reload","SignupForm","_useState","useState","username","email","password","_useState2","_slicedToArray","userFormData","setUserFormData","_useState3","validated","_useState5","_useState6","showAlert","setShowAlert","_useMutation","useMutation","_useMutation2","addUser","handleInputChange","error","event","_event$target","target","name","_objectSpread","_defineProperty","handleFormSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$addUser","data","wrap","_context","prev","next","preventDefault","currentTarget","checkValidity","stopPropagation","variables","sent","Auth","login","t0","console","stop","_x","apply","arguments","_jsx","_Fragment","children","_jsxs","Form","noValidate","onSubmit","Alert","dismissible","onClose","show","variant","Group","Label","htmlFor","Control","type","placeholder","onChange","required","Feedback","Button","disabled","LoginForm","loginUser","_yield$loginUser","GET_ME","QUERY_USERS","QUERY_ALL_IMAGES","QUERY_SINGLE_USER","AppNavbar","showModal","setShowModal","_useState4","useLocation","userId","useParams","_useQuery","useQuery","loading","user","Navbar","bg","expand","Container","fluid","Toggle","Collapse","id","Nav","className","pathname","Link","as","to","loggedIn","onClick","logout","Modal","size","onHide","Tab","defaultActiveKey","Header","closeButton","Title","Item","eventKey","Body","Content","Pane","handleModalClose","SignUpForm","removeImageSrc","imageSrc","savedImageSrcs","JSON","parse","updatedSavedImageSrcs","filter","savedImageSrc","stringify","SavedImages","_userData$savedImages","userData","me","removeImage","handleDeleteImage","imageId","_yield$removeImage","abrupt","Jumbotron","Badge","savedImages","length","map","photo","Card","Img","src","concat","alt","title","thumbnailheight","thumbnailwidth","caption","dotenv","SearchedImages","searchedImages","setSearchedImages","searchInput","setSearchInput","prevSearchInput","setPrevSearchInput","_useState7","_useState8","setSavedImageSrcs","saveImage","useEffect","imageSrcArr","apiKey","background","response","_yield$response$json","imageData","process","document","getElementById","fetch","ok","Error","json","photos","server","secret","handleSaveImage","_ref2","_callee2","imageToSave","_yield$saveImage","_context2","log","find","_toConsumableArray","_x2","Row","Col","xs","md","e","some","ImageList","users","style","fontSize","comments","_id","Photo","props","LikeButton","liked","setLiked","buttonStyle","backgroundColor","color","borderRadius","padding","border","cursor","photoId","AllSavedImages","allImages","i","push","flat","images","likeImage","handleLikedImage","imageToLike","_yield$likeImage","likedImageId","alert","onclick","AllSavedUsers","CommentList","comment","createdAt","commentText","CommentForm","setCommentText","characterCount","setCharacterCount","addComment","getProfile","message","lineHeight","resize","SingleUser","_user$savedImages","_user$savedImages2","_user$comments","CommentsList","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","cache","InMemoryCache","App","ApolloProvider","Router","Routes","Route","path","element","UserList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","React","StrictMode"],"mappings":"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","file":"static/js/main.464938ce.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\n\n// mutation for logged in user\nexport const LOGIN_USER = gql`\n  mutation loginUser($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n        email\n        imageCount\n      savedImages {\n        imageId\n        title\n        caption\n        src\n      }\n      comments {\n        _id\n        commentText\n        username\n        createdAt\n      }\n      }\n    }\n  }\n`;\n\n// mutation to add user\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n        email\n        imageCount\n      savedImages {\n        imageId\n        title\n        caption\n        src\n      }\n      comments {\n        _id\n        commentText\n        username\n        createdAt\n      }\n      }\n    }\n  }\n`;\n\nexport const SAVE_IMAGE = gql`\n mutation SaveImage($imageId: String!, $title: String!, $imageSrc: String, $caption: String!) {\n  saveImage( imageId: $imageId, title: $title, src: $imageSrc, caption: $caption) {\n    _id\n    username\n    email\n    imageCount\n    savedImages {\n      caption\n      imageId\n      src\n      title\n    }\n  }\n}\n`;\n\n\n\nexport const REMOVE_IMAGE = gql`\n  mutation removeImage($imageId: String!) {\n    removeImage(imageId: $imageId) {\n      _id\n      username\n      imageCount\n      savedImages {\n        imageId\n        title\n        caption\n        src\n      }\n    }\n  }\n`;\n\nexport const ADD_COMMENT = gql`\n  mutation addComment($userId: ID!, $commentText: String!, $username: String!) {\n    addComment(userId: $userId ,commentText: $commentText, username: $username) {\n      _id\n      comments {\n        _id\n        commentText\n        createdAt\n      }\n    }\n  }\n`;\n\nexport const LIKE_IMAGE = gql`\n mutation likeImage($imageId: String!) {\n  likeImage( imageId: $imageId) {\n    # _id\n    # username\n    # email\n    # imageCount\n    # savedImages {\n    #   caption\n    #   imageId\n    #   src\n    #   title\n    # }\n    likedImages{\n      imageId\n    }\n  }\n}\n`;\n\n// export const REMOVE_COMMENT = gql`\n//   mutation removeComment($userId: ID!) {\n//     removeComment(userId: $userId) {\n//       _id\n//       comments {\n//         _id\n//         commentText\n//         createdAt\n//       }\n//     }\n//   }\n// `;\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    // If there is a token and it's not expired, return `true`\n    return token && !this.isTokenExpired(token) ? true : false;\n  }\n\n  isTokenExpired(token) {\n    // Decode the token to get its expiration time that was set by the server\n    const decoded = decode(token);\n    // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\n    if (decoded.exp < Date.now() / 1000) {\n      localStorage.removeItem('id_token');\n      return true;\n    }\n    // If token hasn't passed its expiration time, return `false`\n    return false;\n  }\n\n  getToken() {\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    localStorage.removeItem('id_token');\n    window.location.reload();\n  }\n}\n\nexport default new AuthService();","import React, { useState } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\n\n// import { createUser } from \"../utils/API\";\nimport { useMutation } from \"@apollo/client\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nimport Auth from \"../utils/auth\";\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n  });\n\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  //use mutations\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.addUser.token);\n\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your username\"\n            name=\"username\"\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Username is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Your email address\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={\n            !(\n              userFormData.username &&\n              userFormData.email &&\n              userFormData.password\n            )\n          }\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\nimport Auth from \"../utils/auth\";\n\n// importing mutations\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { LOGIN_USER } from \"../utils/mutations\";\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: \"\", password: \"\" });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  // initialize mutation\n  // const [loginUser, { error }] = useMutation(LOGIN_USER);\n  const [loginUser] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await loginUser({\n        variables: { ...userFormData },\n      });\n      Auth.login(data.login.token);\n\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your email\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;","import gql from \"graphql-tag\";\n\nexport const GET_ME = gql`\n  query me {\n    me {\n      _id\n      username\n      email\n      imageCount\n      savedImages {\n        imageId\n        title\n        caption\n        src\n      }\n    }\n  }\n`;\n\nexport const QUERY_USERS = gql`\n  query allUsers {\n    users {\n      _id\n      username\n      email\n      imageCount\n      savedImages {\n        caption\n        imageId\n        src\n        title\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_IMAGES = gql`\n  query allUsers {\n    users {\n      savedImages {\n        caption\n        imageId\n        src\n        title\n      }\n    }\n  }\n`;\n\nexport const QUERY_SINGLE_USER = gql`\n  query singleUser($userId: ID!) {\n    user(userId: $userId) {\n      _id\n      username\n      email\n      imageCount\n      savedImages {\n        caption\n        imageId\n        src\n        title\n      }\n      comments {\n        _id\n        commentText\n        username\n        createdAt\n      }\n    }\n  }\n`;\nexport const QUERY_LIKES = gql`\n query likedImages($imageId: String!) {\n  likedImages( imageId: $imageId) {\n    _id\n    # username\n    # email\n    # imageCount\n    # savedImages {\n    #   caption\n    #   imageId\n    #   src\n    #   title\n    # }\n    likedImages{\n      imageId\n    }\n  }\n}\n`;\n// export const QUERY_COMMENTS = gql`\n//   query getComments {\n//     comments {\n//       _id\n//       commentText\n//       username\n//       createdAt\n//     }\n//   }\n// `;\n\n// export const QUERY_SINGLE_COMMENT = gql`\n//   query getSingleComment($commentId: ID!) {\n//     comment(commentId: $commentId) {\n//       _id\n//       commentText\n//       username\n//       createdAt\n//     }\n//   }\n// `;\n","import React, { useState } from 'react';\nimport { Link, useLocation, Route } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_SINGLE_USER } from '../utils/queries';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n  const [username, setUsername] = useState('My Images');\n  const location = useLocation();\n  const { userId } = useParams();\n\n  const { loading, data } = useQuery(QUERY_SINGLE_USER, {\n    variables: { userId: userId },\n  });\n\n  const user = data?.user || {};\n\n  \n  // const thisUserName = setUsername({user.username});\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg' >\n        <Container fluid>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n            {location.pathname !== \"/\" ? <Nav.Link as={Link} to='/'>\n              Home</Nav.Link> : ''}\n\n\n              {/* if user is logged in show saved images and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                {location.pathname !== \"/saved\" ?\n                  <Nav.Link as={Link} to='/saved'>\n                    {/* {`${thisUserName}'s Images`} */}\n                    Your Images\n                  </Nav.Link> : ''}\n                  {location.pathname !== \"/allsaved\" ?\n                  <Nav.Link as={Link} to='/allsaved'>\n                    Everyone's Images\n                  </Nav.Link> : ''}\n                  {location.pathname !== \"/allusers\" ?\n                  <Nav.Link as={Link} to='/allusers'>\n                    Images by User\n                  </Nav.Link> : ''}\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","export const getSavedImageSrcs = () => {\n    const savedImageSrcs = localStorage.getItem('saved_images')\n      ? JSON.parse(localStorage.getItem('saved_images'))\n      : [];\n  \n    return savedImageSrcs;\n  };\n  \n  export const getLikedImageIds = () => {\n    const likedImageIds = localStorage.getItem('liked_images')\n      ? JSON.parse(localStorage.getItem('liked_images'))\n      : [];\n  \n    return likedImageIds;\n  };\n\n  export const saveImageSrcs = (imageSrcArr) => {\n    if (imageSrcArr.length) {\n      localStorage.setItem('saved_images', JSON.stringify(imageSrcArr));\n    } else {\n      localStorage.removeItem('saved_images');\n    }\n  };\n  \n  export const removeImageSrc = (imageSrc) => {\n    const savedImageSrcs = localStorage.getItem('saved_images')\n      ? JSON.parse(localStorage.getItem('saved_images'))\n      : null;\n  \n    if (!savedImageSrcs) {\n      return false;\n    }\n  \n    const updatedSavedImageSrcs = savedImageSrcs?.filter((savedImageSrc) => savedImageSrc !== imageSrc);\n    localStorage.setItem('saved_images', JSON.stringify(updatedSavedImageSrcs));\n  \n    return true;\n  };\n  ","import React from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  CardColumimageIdArrns,\n  Card,\n  Button,\n  Badge,\n} from \"react-bootstrap\";\n// import Badge from \"react-bootstrap/Badge\"\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport { GET_ME } from \"../utils/queries\";\nimport { REMOVE_IMAGE } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\nimport { removeImageSrc } from \"../utils/localStorage\";\n\nconst SavedImages = () => {\n  const { loading, data } = useQuery(GET_ME);\n  const userData = data?.me || [];\n  const [removeImage] = useMutation(REMOVE_IMAGE);\n\n  // create function that accepts the image's mongo _id value as param and deletes the image from the database\n  const handleDeleteImage = async (imageId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await removeImage({\n        variables: { imageId },\n      });\n      // upon success, remove image's id from localStorage\n      removeImageSrc(imageId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-primary\">\n        <Container>\n          <h1>Your saved images <Badge className=\"bg-warning text-dark\"> {userData.savedImages.length} </Badge> </h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        {/* <h2>\n          {userData.savedImages?.length\n            ? `Viewing ${userData.savedImages.length} saved ${\n                userData.savedImages.length === 1 ? \"image\" : \"images\"\n              }:`\n            : \"You have no saved images\"}\n        </h2> */}\n        {/* <h2>\n          {userData.savedImages?.length\n            ? `Your Saved Images`\n            : \"You have no saved images\"}\n            <Badge bg=\"secondary\"> {userData.savedImages.length} </Badge>\n        </h2> */}\n        <div className=\"masonry-with-columns\">\n          {userData.savedImages?.map((photo) => {\n            return (\n              <Card className=\"card\" key={photo.imageId}>\n                <Card.Img\n                  key={`${photo.imageId}`}\n                  src={`${photo.src}`}\n                  alt={`${photo.title}`}\n                  thumbnailheight={350}\n                  thumbnailwidth={350}\n                  caption={`${photo.title}`}\n                />\n                {\n                  <h4>{photo.title}</h4>\n                }\n                {\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteImage(photo.imageId)}\n                  >\n                    Delete this Image!\n                  </Button>\n                }\n              </Card>\n            );\n          })}\n        </div>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedImages;\n","import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  CardColumns,\n} from \"react-bootstrap\";\nimport { saveImageSrcs, getSavedImageSrcs } from \"../utils/localStorage\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { SAVE_IMAGE } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\nconst SearchedImages = () => {\n  // create state for holding returned google api data\n  const [searchedImages, setSearchedImages] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [prevSearchInput, setPrevSearchInput] = useState(\"\");\n\n  // create state to hold saved imageId values\n  const [savedImageSrcs, setSavedImageSrcs] = useState(getSavedImageSrcs());\n\n  // define the save image function from the mutation\n  const [saveImage, { error }] = useMutation(SAVE_IMAGE);\n  // set up useEffect hook to save `savedImageIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveImageSrcs(savedImageSrcs);\n  });\n\n  // create method to search for images and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const apiKey = process.env.REACT_APP_API_KEY;\n    const background = document.getElementById('background')\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await fetch(\n        `https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${searchInput}&format=json&nojsoncallback=1`\n      );\n\n      if (!response.ok) {\n        throw new Error(\"something went wrong!\");\n      }\n\n      const {\n        photos: { photo },\n      } = await response.json();\n\n      const imageData = photo.map((photo) => ({\n        imageId: photo.id,\n        title: photo.title,\n        caption: photo.title,\n        server: photo.server,\n        secret: photo.secret,\n        imageSrc: `https://live.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}.jpg`,\n      }));\n\n      setSearchedImages(imageData);\n      setPrevSearchInput(searchInput);\n      setSearchInput(\"\");\n      background.className=\"d-none\";\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a image to our database\n  const handleSaveImage = async (imageSrc) => {\n    console.log(\"handleSaveImage: \", searchedImages);\n    console.log(\"imageSrc: \", imageSrc);\n    // find the image in `searchedImages` state by the matching id\n    const imageToSave = searchedImages.find(\n      (photo) => photo.imageSrc === imageSrc\n    );\n    console.log(\"imageToSave: \", imageToSave);\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n    console.log(\"VALIDATED LOGGING IN\");\n    try {\n      const { data } = await saveImage({\n        variables: { ...imageToSave },\n      });\n      console.log(\"RECEIVED DATA\");\n      console.log(data);\n      console.log(savedImageSrcs);\n      // if image successfully saves to user's account, save image id to state\n      setSavedImageSrcs([...savedImageSrcs, imageToSave.imageSrc]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Search for Images!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name=\"searchInput\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type=\"text\"\n                  size=\"lg\"\n                  placeholder=\"Search for an image\"\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n      <div className=\"background\" id=\"background\">      </div>\n\n      <Container className=\"white\">\n        <h2>\n          {searchedImages.length\n            ? `Viewing ${searchedImages.length} results for ${prevSearchInput}:`\n            : \"\"}\n        </h2>\n\n        <div className=\"masonry-with-columns\">\n          {searchedImages.map((photo) => {\n            return (\n              <Card className=\"card\" key={photo.imageId}>\n                <Card.Img\n                  key={`${photo.imageId}`}\n                  src={`https://live.staticflickr.com/${photo.server}/${photo.imageId}_${photo.secret}.jpg`}\n                  alt={`${photo.title}`}\n                  thumbnailheight={350}\n                  thumbnailwidth={350}\n                  caption={`${photo.title}`}\n                />\n                {<h4>{photo.src}</h4>}\n                {Auth.loggedIn() && (\n                  <Button\n                    disabled={savedImageSrcs?.some(\n                      (savedImageSrc) => savedImageSrc === photo.imageSrc\n                    )}\n                    className=\"btn-block btn-info\"\n                    onClick={() => handleSaveImage(photo.imageSrc)}\n                  >\n                    {savedImageSrcs?.some(\n                      (savedImageSrc) => savedImageSrc === photo.imageSrc\n                    )\n                      ? \"This image has already been saved!\"\n                      : \"Save this Image!\"}\n                  </Button>\n                )}\n              </Card>\n            );\n          })}\n        </div>\n      </Container>\n    </>\n  );\n};\nexport default SearchedImages;\n","import React from 'react';\n// import {\n//   Jumbotron,\n//   Container,\n//   CardColumimageIdArrns,\n//   Card,\n//   Button,\n// } from \"react-bootstrap\";\nimport { Link } from 'react-router-dom';\n\n\nconst ImageList = ({ users, title  }) => {\n \n\n    if (!users.length) {\n    return <h3>No Saved images Yet</h3>;\n  }\n\n  return (\n  \n    <div>\n    <h3 className=\"text-primary\">{title}</h3>\n    <div className=\"flex-row justify-space-between my-4\">\n      \n      \n        {users &&\n          users.map((user) => (\n            <div key={users._id} className=\"col-12 col-xl-6\">\n              <div className=\"card mb-3\">\n                <h4 className=\"card-header bg-dark text-light p-2 m-0\">\n                  {user.username} <br />\n                  <span className=\"text-white\" style={{ fontSize: '1rem' }}>\n                    currently has {user.savedImages ? user.savedImages.length : 0}{' '}\n                    image \n                    {user.savedImages && user.savedImages.length === 1 ? '' : 's'} saved\n                  </span> <br />\n                  <span className=\"text-white\" style={{ fontSize: '1rem' }}>\n                    currently has {user.comments ? user.comments.length : 0}{' '}\n                    comments on their album page\n                    {user.comments && user.comments.length === 1 ? '' : ''}\n                  </span>\n                </h4>\n                <Link\n                  className=\"btn btn-block btn-squared btn-outline-info btn-light text-dark\"\n                  to={`/users/${user._id}`}\n                >\n                  View and share comments on {user.username}'s images.\n                </Link>\n              </div>\n              </div>\n          ))}\n      </div>\n      </div>\n \n  );\n};\nexport default ImageList;\n\n","import React from 'react';\nimport LikeButton from './LikeButton';\n\nfunction Photo(props) {\n  return (\n    <div className=\"photo\">\n      <img src={props.src} alt={props.alt} />\n      <LikeButton />\n    </div>\n  );\n}\n\nexport default Photo;\n","import React, { useState } from \"react\";\nimport props from \"./LikePhoto\";\n// import LikeImages from \"../utils/likes\";\n\nfunction LikeButton() {\n  const [liked, setLiked] = useState(false);\n\n  const handleClick = () => {\n    setLiked(!liked);\n    console.log(`User ${props.userId} liked photo ${props.photoId}`);\n  };\n\n  const buttonStyle = {\n    backgroundColor: liked ? \"salmon\" : \"skyblue\",\n    color: \"white\",\n    borderRadius: \"8px\",\n    padding: \"8px 16px\",\n    border: \"none\",\n    cursor: \"pointer\",\n  };\n\n  return (\n    <button style={buttonStyle} onClick={handleClick}>\n      {liked ? \"Love-it!!:}\" : \"Like this image\"}\n    </button>\n  );\n}\n\nexport default LikeButton;\n","import React, { useState } from \"react\";\nimport ImageList from \"../components/ImageList\";\nimport { useQuery } from \"@apollo/react-hooks\";\n// import { QUERY_USERS} from \"../utils/queries\";\nimport { QUERY_ALL_IMAGES } from \"../utils/queries\";\nimport LikeButton from \"./LikeButton\";\nimport Auth from \"../utils/auth\";\nimport { likedImageIds, getLikedImageIds } from \"../utils/localStorage\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { LIKE_IMAGE } from \"../utils/mutations\";\nimport { Container, Badge, Jumbotron, Button, Card } from \"react-bootstrap\";\n// import { QUERY_USERS} from \"../utils/queries\";\nimport UserNav from \"../components/ImageAndUserNav\";\n\n// create state to hold saved imageId values\n// use this page to display query/resolver of ALL saved images on DB\n\nconst AllSavedImages = () => {\n  const [likedImageIds, setLikedImageIds] = useState(getLikedImageIds());\n  // const { loading, data } = useQuery(QUERY_USERS);\n  const { loading, data } = useQuery(QUERY_ALL_IMAGES);\n  console.log(\"Hello\", data);\n  const users = data?.users || [];\n  console.log(\"users: \", users);\n  const allImages = [];\n  for (let i = 0; i < users.length; i++) {\n    allImages.push(users[i].savedImages);\n  }\n  console.log(\"allImages: \", allImages.flat());\n  const images = allImages.flat();\n  console.log(\"images: \", images);\n  const [likeImage, { error }] = useMutation(LIKE_IMAGE);\n\n  // create function to handle saving a image to our database\n  const handleLikedImage = async (imageId) => {\n    // console.log(\"handleLikedImage: \", likedImageIds);\n    console.log(\"imageId: \", imageId);\n    // find the image in `searchedImages` state by the matching id\n    const imageToLike = images.find((photo) => photo.imageId === imageId);\n    console.log(\"imageToLike: \", imageToLike);\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n    console.log(\"VALIDATED LOGGING IN\");\n    try {\n      const { data } = await likeImage({\n        variables: { ...imageToLike },\n      });\n      console.log(\"RECEIVED DATA\");\n      // console.log(data);\n      // console.log(savedImageSrcs);\n      // if image successfully saves to user's account, save image id to state\n      // setSavedImageSrcs([...savedImageSrcs, imageToLike.imageSrc]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n\n  return (\n    <>\n      {/* <Container>\n      <UserNav />\n</Container> */}\n      <main>\n        <div className=\"flex-row justify-center\">\n          <div className=\"col-12 col-md-10 my-3\">\n            {loading ? (\n              <div>Loading...</div>\n            ) : (\n              // <ImageList\n              //   users={users}\n              //   title=\"See what inspires other users...\"\n              // />\n              <Container>\n                <h2>\n                  {images.length ? `Viewing ${images.length} results:` : \"\"}\n                </h2>\n\n                <div className=\"masonry-with-columns\">\n                  {images.map((photo) => {\n                    return (\n                      <Card className=\"card\" key={photo.imageId}>\n                        <Card.Img\n                          key={`${photo.imageId}`}\n                          src={`${photo.src}`}\n                          alt={`${photo.title}`}\n                          thumbnailheight={350}\n                          thumbnailwidth={350}\n                          caption={`${photo.title}`}\n                        />\n                        {}\n\n                        {/* <LikeButton\n                    className=\"btn-block btn-danger\"\n                    //make this button red\n                    // disabled={savedImageIds?.some(\n\n                    // onClick={() => handleDeleteImage(photo.imageId)}\n                    onClick={() => alert(`Liked ${photo.title}` )}\n                    onclick={() => console.log(`Liked ${photo.title}` )}\n                  >\n                    Like this Image!\n                  </LikeButton> */}\n\n                        {Auth.loggedIn() && (\n                          <Button\n                            disabled={images?.some(\n                              (likedImageId) => likedImageId === photo.imageId\n                            )}\n                            className=\"btn-block btn-info\"\n                            onClick={() => handleLikedImage(photo.imageId)}\n                          >\n                            {images?.some(\n                              (likedImageId) => likedImageId === photo.imageId\n                            )\n                              ? \"Love-it!!:}\"\n                              : \"Like this Image!\"}\n                          </Button>\n                        )}\n                      </Card>\n                    );\n                  })}\n                </div>\n              </Container>\n            )}\n          </div>\n        </div>\n      </main>\n      {/* <div className=\"flex-row justify-center\">\n          <div className=\"col-12 col-md-10 my-3\"> */}\n      {loading ? (\n        <div>Loading...</div>\n      ) : (\n        // <ImageList\n        //   users={users}\n        //   title=\"See what inspires other users...\"\n        // />\n        <>\n          <Jumbotron fluid className=\"text-light bg-primary\">\n            <Container>\n              <h1>\n                Everyone's saved images{\" \"}\n                <Badge className=\"bg-warning text-dark\">\n                  {\" \"}\n                  {images.length}{\" \"}\n                </Badge>{\" \"}\n              </h1>\n            </Container>\n          </Jumbotron>\n\n          <Container>\n            {/* <h2>\n                  {images.length\n                    ? `Viewing ${images.length} results:`\n                    : \"\"}\n                </h2> */}\n            <div className=\"masonry-with-columns\">\n              {images.map((photo) => {\n                return (\n                  <Card className=\"card\" key={photo.imageId}>\n                    <Card.Img\n                      key={`${photo.imageId}`}\n                      src={`${photo.src}`}\n                      alt={`${photo.title}`}\n                      thumbnailheight={350}\n                      thumbnailwidth={350}\n                      caption={`${photo.title}`}\n                    />\n                    {}\n\n                    <LikeButton\n                      className=\"btn-block btn-danger\"\n                      //make this button red\n                      // disabled={savedImageIds?.some(\n\n                      // onClick={() => handleDeleteImage(photo.imageId)}\n                      onClick={() => alert(`Liked ${photo.title}`)}\n                      onclick={() => console.log(`Liked ${photo.title}`)}\n                    >\n                      Like this Image!\n                    </LikeButton>\n                  </Card>\n                );\n              })}\n            </div>\n          </Container>\n        </>\n      )}\n      {/* </div>\n        </div> */}\n    </>\n  );\n};\n\nexport default AllSavedImages;\n","import React from 'react';\nimport ImageList from '../components/ImageList';\nimport { Container,  Card } from \"react-bootstrap\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { QUERY_USERS} from \"../utils/queries\";\nimport UserNav from \"../components/ImageAndUserNav\"; \n\nconst AllSavedUsers = () => {\n\n    const { loading, data } = useQuery(QUERY_USERS);\n    const users = data?.users || [];\n\n    return (\n      <>\n      {/* <UserNav /> */}\n        <main>\n          <div className=\"flex-row justify-center\">\n            <div className=\"col-12 col-md-10 my-3\">\n              {loading ? (\n                <div>Loading...</div>\n              ) : (\n                <ImageList\n                  users={users}\n                  title=\"See what inspires other users...\"\n                />\n              )}\n            </div>\n          </div>\n        </main>\n        </>\n      );\n    };\n\n    export default AllSavedUsers;\n","import React from 'react';\n\nconst CommentList = ({ comments }) => {\n  if (!comments.length) {\n    return <h3>No Comments Yet</h3>;\n  }\n\n  return (\n    <>\n      <div className=\"flex-row my-4\">\n        {comments &&\n          comments.map((comment) => (\n            <div key={comment._id} className=\"col-12 mb-3 pb-3\">\n              <div className=\"p-3 bg-dark text-light\">\n                <h5 className=\"card-header\">\n                  {comment.username} commented{' '}\n                  <span style={{ fontSize: '0.825rem' }}>\n                    on {comment.createdAt}\n                  </span>\n                </h5>\n                <p className=\"card-body\">{comment.commentText}</p>\n              </div>\n            </div>\n          ))}\n      </div>\n    </>\n  );\n};\n\nexport default CommentList;\n\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\n\nimport { ADD_COMMENT } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\n\nconst CommentForm = ({ userId }) => {\n  const [commentText, setCommentText] = useState('');\n  const [characterCount, setCharacterCount] = useState(0);\n\n  const [addComment, { error }] = useMutation(ADD_COMMENT);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const data = await addComment({\n        variables: { userId, commentText, username: Auth.getProfile().data.username, },\n      });\n\n      setCommentText('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    if (name === 'commentText' && value.length <= 280) {\n      setCommentText(value);\n      setCharacterCount(value.length);\n    }\n  };\n\n  return (\n    <div>\n      <h4>Add some more comments below.</h4>\n\n      {Auth.loggedIn() ? (\n        <>\n          <p\n            className={`m-0 ${\n              characterCount === 280 || error ? 'text-danger' : ''\n            }`}\n          >\n            Character Count: {characterCount}/280\n            {error && <span className=\"ml-2\">{error.message}</span>}\n          </p>\n          <form\n            className=\"flex-row justify-center justify-space-between-md align-center\"\n            onSubmit={handleFormSubmit}\n          >\n            <div className=\"col-12 col-lg-9\">\n              <textarea\n                name=\"commentText\"\n                placeholder=\"Add your comment...\"\n                value={commentText}\n                className=\"form-input w-100\"\n                style={{ lineHeight: '1.5', resize: 'vertical' }}\n                onChange={handleChange}\n              ></textarea>\n            </div>\n\n            <div className=\"col-12 col-lg-3\">\n              <button className=\"btn btn-primary btn-block py-3\" type=\"submit\">\n                Add Comment\n              </button>\n            </div>\n          </form>\n        </>\n      ) : (\n        <p>\n          You need to be logged in to share your thoughts. Please{' '}\n          <Link to=\"/login\">login</Link> or <Link to=\"/signup\">signup.</Link>\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default CommentForm;\n\n","import React from 'react';\nimport {\n  Jumbotron,\n  Container,\n  Card,\n  Button,\n} from \"react-bootstrap\";\n\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport CommentsList from '../components/CommentList';\nimport CommentForm from '../components/CommentForm';\n\nimport { QUERY_SINGLE_USER } from '../utils/queries';\n\n\nconst SingleUser = () => {\n  const { userId } = useParams();\n\n  const { loading, data } = useQuery(QUERY_SINGLE_USER, {\n    variables: { userId: userId },\n  });\n\n  const user = data?.user || {};\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n  return (\n    <>\n    <Jumbotron fluid className=\"text-light bg-dark\">\n      <Container>\n        <h1>Viewing {user.username} saved images</h1>\n      </Container>\n    </Jumbotron>\n    <Container>\n    <h2>\n          {user.savedImages?.length\n            ? `Viewing ${user.savedImages.length} saved ${\n              user.savedImages.length === 1 ? \"image\" : \"images\"\n              }:`\n            : \"You have no saved images\"}\n        </h2>\n        <div className=\"masonry-with-columns\">\n          {user.savedImages?.map((photo) => {\n            return (\n              <Card className=\"card\" key={photo.imageId}>\n                <Card.Img\n                  key={`${photo.imageId}`}\n                  src={`${photo.src}`}\n                  alt={`${photo.title}`}\n                  thumbnailheight={350}\n                  thumbnailwidth={350}\n                  caption={`${photo.title}`}\n                />\n                {\n                  <h4>{photo.title}</h4>\n                }\n              </Card>\n            );\n          })}\n        </div>\n    </Container>\n    <Container>\n    <div>\n      <h2 className=\"card-header\">\n        {user.username}'s friends have commented on their image album...\n      </h2>\n      {user.comments?.length > 0 && <CommentsList comments={user.comments} />}\n      <div className=\"my-4 p-4\" style={{ border: '1px dotted #1a1a1a' }}>\n        <CommentForm userId={user._id} />\n      </div>\n    </div>\n    </Container>\n    </>\n  );\n};\n\nexport default SingleUser;\n","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport './App.css';\n// import FlickrPhotos from \"./components/flickr\";\nimport AppNavbar from './components/navbar';\n// import Gallery from './components/Gallery';\nimport SavedImages from \"./pages/SavedImages\";\nimport SearchedImages from \"./pages/SearchedImages\";\nimport AllSavedImages from \"./pages/AllSavedImages\";\nimport UserList from \"./pages/UserList\";\nimport SingleUser from \"./pages/SingleUser\";\n// import Cloud from './components/cloud';\n\n// import { CloudinaryContext, Transformation, Image } from 'cloudinary-react';\n// import axios from 'axios';\nimport PicturePost from './components/picturePost';\nimport {ApolloClient, ApolloProvider, InMemoryCache, createHttpLink,} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem(\"id_token\");\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n    <Router>\n      <>\n    <AppNavbar />\n    {/* <PicturePost /> */}\n    {/* <FlickrPhotos /> */}\n    {/* <Cloud /> */}\n    {/* <Gallery /> */}\n    <Routes>\n            <Route path=\"/\" element={<SearchedImages />} />\n            <Route path=\"/saved\" element={<SavedImages />} />\n            <Route path=\"/allsaved\" element={<AllSavedImages />} />\n            <Route path=\"/allusers\" element={<UserList />} />\n            <Route path=\"/users/:userId\" element={<SingleUser />} />\n            <Route\n              path=\"*\"\n              element={<h1 className=\"display-2\">Wrong page!</h1>}\n            />\n          </Routes>\n        </>\n      </Router>\n    </ApolloProvider>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}